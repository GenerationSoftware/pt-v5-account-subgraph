#############################################################################
# PoolTogether Subgraph Schema
# --------------------------------------------------------------------------
# Notes:
# - Entity IDs are keccak256 hashes of one or multiple fields represented in
# byte form and concatenated in the order specified next to the ID field in
# this document. This is to save storage and query costs since there will
# be less data in the ID field compared to if we did not hash the composite
# ID.
# - Composite Hash IDs are denoted by `generateHashId(...fields)`
#
#############################################################################

type Vault @entity {
  id: Bytes! # Vault.address
  address: Bytes!
  balance: BigInt!
  delegateBalance: BigInt!
  balanceUpdates: [VaultBalanceUpdate!]! @derivedFrom(field: "vault")
  observations: [VaultObservation!]! @derivedFrom(field: "vault")
  accounts: [Account!]! @derivedFrom(field: "vault")
  prizeClaims: [PrizeClaim!]! @derivedFrom(field: "vault") # prize claims for this vault
}

type User @entity {
  id: Bytes! # User.address
  address: Bytes!
  accounts: [Account!]! @derivedFrom(field: "user")
}

type Account @entity {
  id: Bytes! # generateHashId(Vault.address, User.address)
  vault: Vault!
  user: User!
  delegate: Account # account to whom this account delegates their balances
  balance: BigInt! # balance in account
  delegateBalance: BigInt! # amount of balance delegated to this account
  balanceUpdates: [AccountBalanceUpdate!]! @derivedFrom(field: "account")
  observations: [AccountObservation!]! @derivedFrom(field: "account")
  delegators: [Account!]! @derivedFrom(field: "delegate") # accounts who delegated to this account
  prizesWon: [PrizeClaim!]! @derivedFrom(field: "winner") # prize claims where this user is the winner
  prizesReceived: [PrizeClaim!]! @derivedFrom(field: "winner") # prize claims where this user is the prize recipient
  fees: [PrizeClaim!]! @derivedFrom(field: "feeRecipient") # prize claim fees earned by this user
}

type Draw @entity {
  id: Bytes! # Draw.drawId as bytes
  drawId: Int! # numerical draw ID for sorting
  numTiers: Int!
  lastNumTiers: Int!
  prizeClaims: [PrizeClaim!]! @derivedFrom(field: "draw") # prize claims for this draw
  winningRandomNumber: BigInt!
  reserve: BigInt!
  prizeTokensPerShare: BigInt!
  drawOpenedAt: BigInt!
  closedAtTimestamp: BigInt!
  txHash: Bytes!
}

type PrizeClaim @entity {
  id: Bytes! # generateHashId(Vault.address, Winner.address, Draw.drawId, PrizeClaim.tier, PrizeClaim.prizeIndex)
  vault: Vault!
  winner: Account!
  recipient: Bytes! # address (where the prize was sent)
  draw: Draw!
  tier: Int!
  prizeIndex: BigInt!
  payout: BigInt!
  fee: BigInt!
  feeRecipient: Account! # address (who gets the claim fee)
  timestamp: BigInt!
  txHash: Bytes!
}

type AccountBalanceUpdate implements BalanceUpdate @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  account: Account!
  amount: BigInt!
  delegateAmount: BigInt!
  balance: BigInt!
  delegateBalance: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
}

type VaultBalanceUpdate implements BalanceUpdate @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  vault: Vault!
  amount: BigInt!
  delegateAmount: BigInt!
  balance: BigInt!
  delegateBalance: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
}

type AccountObservation implements Observation @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  account: Account!
  balance: BigInt!
  delegateBalance: BigInt!
  cumulativeBalance: BigInt!
  timestamp: BigInt!
  isNew: Boolean!
  txHash: Bytes!
}

type VaultObservation implements Observation @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  vault: Vault!
  balance: BigInt!
  delegateBalance: BigInt!
  cumulativeBalance: BigInt!
  timestamp: BigInt!
  isNew: Boolean!
  txHash: Bytes!
}

interface BalanceUpdate {
  amount: BigInt!
  delegateAmount: BigInt!
  balance: BigInt!
  delegateBalance: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
}

interface Observation {
  balance: BigInt!
  delegateBalance: BigInt!
  cumulativeBalance: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
}

type RngAuction @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  sender: Bytes!
  recipient: Bytes!
  sequenceId: BigInt!
  rng: Bytes!
  rngRequestId: BigInt!
  elapsedTime: BigInt!
  rewardFraction: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
  gasUsed: BigInt!
}
