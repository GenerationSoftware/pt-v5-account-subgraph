#############################################################################
# PoolTogether Subgraph Schema
# --------------------------------------------------------------------------
# Notes:
# - Entity IDs are keccak256 hashes of one or multiple fields represented in
# byte form and concatenated in the order specified next to the ID field in
# this document. This is to save storage and query costs since there will
# be less data in the ID field compared to if we did not hash the composite
# ID.
# - Composite Hash IDs are denoted by `generateHashId(...fields)`
#
#############################################################################

type PrizeVault @entity {
  id: Bytes! # PrizeVault.address
  address: Bytes!
  liquidationPair: LiquidationPair
  balance: BigInt!
  delegateBalance: BigInt!
  balanceUpdates: [VaultBalanceUpdate!]! @derivedFrom(field: "prizeVault")
  observations: [VaultObservation!]! @derivedFrom(field: "prizeVault")
  accounts: [Account!]! @derivedFrom(field: "prizeVault")
  prizeClaims: [PrizeClaim!]! @derivedFrom(field: "prizeVault") # prize claims for this prizeVault
}

type User @entity {
  id: Bytes! # User.address
  address: Bytes!
  accounts: [Account!]! @derivedFrom(field: "user")
}

type Account @entity {
  id: Bytes! # generateHashId(PrizeVault.address, User.address)
  prizeVault: PrizeVault!
  user: User!
  delegate: Account # account to whom this account delegates their balances
  balance: BigInt! # balance in account
  delegateBalance: BigInt! # amount of balance delegated to this account
  balanceUpdates: [AccountBalanceUpdate!]! @derivedFrom(field: "account")
  observations: [AccountObservation!]! @derivedFrom(field: "account")
  delegators: [Account!]! @derivedFrom(field: "delegate") # accounts who delegated to this account
  #
  # TODO: Figure out why these relational fields don't work with the Account type
  #       In PrizeClaim queries the winner, claimRewardRecipient and recipient get set to null if
  #       they are Account and not Bytes
  #
  # prizesWon: [PrizeClaim!]! @derivedFrom(field: "winner") # prize claims where this user is the winner
  # prizesReceived: [PrizeClaim!]! @derivedFrom(field: "recipient") # prize claims where this user is the prize recipient
  # claimRewards: [PrizeClaim!]! @derivedFrom(field: "claimRewardRecipient") # prize claim rewards earned by this user
}

type Draw @entity {
  id: Bytes! # Draw.drawId as bytes
  drawId: Int! # numerical draw ID for sorting
  numTiers: Int!
  lastNumTiers: Int!
  prizeClaims: [PrizeClaim!]! @derivedFrom(field: "draw") # prize claims for this draw
  winningRandomNumber: BigInt!
  reserve: BigInt!
  prizeTokensPerShare: BigInt!
  drawOpenedAt: BigInt!
  closedAtTimestamp: BigInt!
  txHash: Bytes!
}

type PrizeClaim @entity {
  id: Bytes! # generateHashId(PrizeVault.address, Winner.address, Draw.drawId, PrizeClaim.tier, PrizeClaim.prizeIndex)
  prizeVault: PrizeVault!
  winner: Bytes! # address (who won the prize)
  recipient: Bytes! # address (where the prize was sent)
  draw: Draw!
  tier: Int!
  prizeIndex: BigInt!
  payout: BigInt!
  claimReward: BigInt!
  claimRewardRecipient: Bytes! # address (who got the claim reward)
  timestamp: BigInt!
  txHash: Bytes!
  gasUsed: BigInt!
}

type AccountBalanceUpdate implements BalanceUpdate @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  account: Account!
  amount: BigInt!
  delegateAmount: BigInt!
  balance: BigInt!
  delegateBalance: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
}

type VaultBalanceUpdate implements BalanceUpdate @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  prizeVault: PrizeVault!
  amount: BigInt!
  delegateAmount: BigInt!
  balance: BigInt!
  delegateBalance: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
}

type AccountObservation implements Observation @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  account: Account!
  balance: BigInt!
  delegateBalance: BigInt!
  cumulativeBalance: BigInt!
  timestamp: BigInt!
  isNew: Boolean!
  txHash: Bytes!
}

type VaultObservation implements Observation @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  prizeVault: PrizeVault!
  balance: BigInt!
  delegateBalance: BigInt!
  cumulativeBalance: BigInt!
  timestamp: BigInt!
  isNew: Boolean!
  txHash: Bytes!
}

interface BalanceUpdate {
  amount: BigInt!
  delegateAmount: BigInt!
  balance: BigInt!
  delegateBalance: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
}

interface Observation {
  balance: BigInt!
  delegateBalance: BigInt!
  cumulativeBalance: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
}

type RngAuction @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  from: Bytes!
  sender: Bytes!
  recipient: Bytes!
  sequenceId: BigInt!
  rng: Bytes!
  rngRequestId: BigInt!
  elapsedTime: BigInt!
  rewardFraction: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
  gasUsed: BigInt!
}

type RngRelay @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  from: Bytes!
  messageDispatcher: Bytes!
  remoteOwnerChainId: BigInt!
  remoteOwner: Bytes!
  remoteRngAuctionRelayListener: Bytes!
  rewardRecipient: Bytes!
  messageId: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
  gasUsed: BigInt!
}

type RngRelayReward @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  recipient: Bytes!
  reward: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
  gasUsed: BigInt!
}

type LiquidationPair @entity {
  id: Bytes! # address
  liquidations: [Liquidation!]! @derivedFrom(field: "liquidationPair")
  prizeVault: PrizeVault @derivedFrom(field: "liquidationPair")
  vaultBooster: VaultBooster @derivedFrom(field: "liquidationPair")
  address: Bytes!
  source: Bytes!
  tokenIn: Bytes!
  tokenOut: Bytes!
  targetAuctionPeriod: BigInt!
  minimumAuctionAmount: BigInt!
  smoothingFactor: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
  gasUsed: BigInt!
}

type Liquidation @entity {
  id: Bytes! # generateHashId(tx.hash, event.logIndex)
  liquidationPair: LiquidationPair!
  sender: Bytes!
  receiver: Bytes!
  amountOut: BigInt!
  amountInMax: BigInt!
  amountIn: BigInt!
  deadline: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
  gasUsed: BigInt!
}

type VaultBooster @entity {
  id: Bytes! # VaultBooster.address
  liquidationPair: LiquidationPair
  address: Bytes!
  prizePool: Bytes
  # TODO: # prizePool: PrizePool!
  prizeVault: PrizeVault
  owner: Bytes
}

# TODO:
# type PrizePool @entity {
#   id: Bytes! # PrizePool.address
#   address: Bytes!
# }
